name: "General Testing"
on:
  - push
  - pull_request

permissions:
  contents: read
  pull-requests: read

jobs:
  x86_64:
    strategy:
      matrix:
        py-version:
          # - 3.8
          # - 3.9
          # - 3.10
          # - 3.11
          - 3.12
        os:
          - windows-latest
          # - ubuntu-latest
        compiler:
          - clang
          - gcc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-latest' && matrix.compiler == 'gcc'
        with:
          msystem: UCRT64
      - uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-latest' && matrix.compiler == 'clang'
        with:
          msystem: CLANG64
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py-version }}
          cache: "pip"
      - name: build windows python module
        shell: msys2 {0}
        if: matrix.os == 'windows-latest'
        run: |
          pip install pytest meson-python ninja pybind11
          python -m pip install --editable .
      - name: run windows pytest
        shell: msys2 {0}
        if: matrix.os == 'windows-latest'
        run: pytest

      - name: compile linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install pytest meson-python ninja pybind11
          python -m pip install --editable .
      - name: test linux
        if: matrix.os == 'ubuntu-latest'
        run: pytest

  emscripten:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12.3
          cache: "pip"
      - run: |
          pip install pyodide-build==0.27.3
      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.58
      - run: pyodide build
      - run: |
          pyodide venv .venv-pyodide
          source .venv-pyodide/bin/activate
          pip install pytest dist/$(ls dist)
          pytest
